# This workflow automates the deployment of your multi-service application...
name: Deploy to EC2 with Docker Compose

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  # ====================================================================
  # JOB 1: Detect which services have changed...
  # ====================================================================
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      auth_service: ${{ steps.filter.outputs.auth_service }}
      super_id_service: ${{ steps.filter.outputs.super_id_service }}
      data_capture_rightmove_service: ${{ steps.filter.outputs.data_capture_rightmove_service }}
      workflow_changed: ${{ steps.filter.outputs.workflow_changed }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            auth_service:
              - 'auth_service/**'
            super_id_service:
              - 'super_id_service/**'
            data_capture_rightmove_service:
              - 'data_capture_rightmove_service/**'
            workflow_changed:
              - '.github/workflows/**'
              - 'docker-compose.prod.yml'

  # ====================================================================
  # JOBS 2, 3, 4: Build and push Docker images for each service.
  # ====================================================================
  build-auth-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.auth_service == 'true' || needs.detect-changes.outputs.workflow_changed == 'true' || github.event_name == 'workflow_dispatch'
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/auth_service
    uses: ./.github/workflows/_reusable-build-push.yml
    with:
      service_name: auth_service
      image_name: ${{ env.IMAGE_NAME }}
    secrets:
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_MONOREPO_TOKEN }}

  build-super-id-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.super_id_service == 'true' || needs.detect-changes.outputs.workflow_changed == 'true' || github.event_name == 'workflow_dispatch'
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/super_id_service
    uses: ./.github/workflows/_reusable-build-push.yml
    with:
      service_name: super_id_service
      image_name: ${{ env.IMAGE_NAME }}
    secrets:
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_MONOREPO_TOKEN }}

  build-data-capture-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.data_capture_rightmove_service == 'true' || needs.detect-changes.outputs.workflow_changed == 'true' || github.event_name == 'workflow_dispatch'
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/data_capture_rightmove_service
    uses: ./.github/workflows/_reusable-build-push.yml
    with:
      service_name: data_capture_rightmove_service
      image_name: ${{ env.IMAGE_NAME }}
    secrets:
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_MONOREPO_TOKEN }}

  # ====================================================================
  # JOB 5: Deploy to the EC2 server.
  # ====================================================================
  deploy:
    needs:
      - detect-changes
      - build-auth-service
      - build-super-id-service
      - build-data-capture-service
    if: always() && (needs.detect-changes.outputs.auth_service == 'true' || needs.detect-changes.outputs.super_id_service == 'true' || needs.detect-changes.outputs.data_capture_rightmove_service == 'true' || needs.detect-changes.outputs.workflow_changed == 'true' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            mkdir -p /home/ubuntu/paservices
            cd /home/ubuntu/paservices

            echo "Fetching the latest code from origin..."
            git fetch origin

            echo "Resetting local 'staging' branch to match remote..."
            git reset --hard origin/staging
            echo "âœ… Local repository is now in a clean state."

            echo "Decrypting production environment files..."

            gpg --quiet --batch --yes --decrypt \
              --passphrase="${{ secrets.GPG_PASSPHRASE }}" \
              -o auth_service/.env.production auth_service/.env.production.gpg
            echo "âœ… Decrypted environment for auth_service."

            gpg --quiet --batch --yes --decrypt \
              --passphrase="${{ secrets.GPG_PASSPHRASE }}" \
              -o super_id_service/.env.production super_id_service/.env.production.gpg
            echo "âœ… Decrypted environment for super_id_service."

            gpg --quiet --batch --yes --decrypt \
              --passphrase="${{ secrets.GPG_PASSPHRASE }}" \
              -o data_capture_rightmove_service/.env.prod data_capture_rightmove_service/.env.prod.gpg
            echo "âœ… Decrypted environment for data_capture_rightmove_service."

            echo "Logging into Docker Hub..."
            echo ${{ secrets.DOCKERHUB_MONOREPO_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            echo "Pulling latest Docker images..."
            docker compose -f docker-compose.prod.yml pull

            echo "Running database migrations..."
            docker compose -f docker-compose.prod.yml run --rm \
              --env-file ./auth_service/.env.production \
              auth_service alembic upgrade head

            docker compose -f docker-compose.prod.yml run --rm \
              --env-file ./super_id_service/.env.production \
              super_id_service alembic upgrade head
              
            docker compose -f docker-compose.prod.yml run --rm \
              --env-file ./data_capture_rightmove_service/.env.prod \
              data_capture_rightmove_service alembic upgrade head

            echo "Starting application stack..."
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -f

            echo "ðŸš€ Deployment complete!"
